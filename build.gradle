println """
******************************************
        Building Galactic Science! 

 Output files will be in basePath/build/
******************************************
"""

import org.apache.tools.ant.filters.ReplaceTokens

version = packVersion
description = packDescription
def forgeCompatibility = packForgeCompatibility
def replaceTokenPattern = /.*\.(properties|txt|json|cfg|conf|config|xml|recipes)/

ext {
    buildSources = "$buildDir/sources"
}

task buildAll(dependsOn: ['buildServer', 'buildClient', 'buildCurse'])

task compileServer(type: Copy) {
    delete "$buildSources/server"

    from('src') {
        exclude '**/_CLIENT/**'
        exclude 'manifest.json'
    }
    into "$buildSources/server"

    eachFile { details ->
        details.path = details.path.replaceAll('_SERVER', '');

        if (details.getName() ==~ replaceTokenPattern) {
            filter(ReplaceTokens, tokens: project.properties.collectEntries { k, v -> [k, v ?: ''] })
        }
    }
    includeEmptyDirs = false
}

task compileClient(type: Copy) {
    delete "$buildSources/client"

    from('src') {
        exclude '**/_SERVER/**'
        exclude 'manifest.json'
    }
    into "$buildSources/client"
    
    eachFile { details ->
        details.path = details.path.replaceAll('_CLIENT', '');

        if (details.getName() ==~ replaceTokenPattern) {
            filter(ReplaceTokens, tokens: project.properties.collectEntries { k, v -> [k, v ?: ''] })
        }
    }
    includeEmptyDirs = false
}

task compileCurse(type: Copy) {
    delete "$buildSources/curse"

    copy {
        from('src') {
            exclude '**/_SERVER/**'
            exclude '_CLIENT/bin'
            exclude 'manifest.json'
        }
        into "$buildSources/curse/overrides"

        eachFile { details ->
            details.path = details.path.replaceAll('_CLIENT', '');

            if (details.getName() ==~ replaceTokenPattern) {
                filter(ReplaceTokens, tokens: project.properties.collectEntries { k, v -> [k, v ?: ''] })
            }

            if (details.getPath().startsWith('mods/')) {
                def includeMods = project.unavailableCurseMods.split(',')
                def exclude = true
                for(mod in includeMods) {
                    if (details.getName() ==~ /${mod}/) {
                        exclude = false
                    }
                }
                if (exclude) {
                    details.exclude()
                }
            }
        }
        includeEmptyDirs = false
    }
    copy {
        from('src') {
            include 'manifest.json'
            filter(ReplaceTokens, tokens: project.properties.collectEntries { k, v -> [k, v ?: ''] })
        }
        into "$buildSources/curse"
    }
}

task buildServer(type: Zip, dependsOn: ['compileServer']) {
    archiveFileName = "${project.name}_${project.version}_Server.zip"
    destinationDirectory = file("$buildDir")

    from "$buildSources/server"
}

task buildClient(type: Zip, dependsOn: ['compileClient']) {
    archiveFileName = "${project.name}_${project.version}_Client.zip"
    destinationDirectory = file("$buildDir")

    from "$buildSources/client"
}

task buildCurse(type: Zip, dependsOn: ['compileCurse']) {
    archiveFileName = "${project.name}_${project.version}_CurseProfile.zip"
    destinationDirectory = file("$buildDir")

    from "$buildSources/curse"
}
